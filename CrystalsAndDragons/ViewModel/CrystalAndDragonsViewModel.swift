//
//  CrystalAndDragonsViewModel.swift
//  CrystalsAndDragons
//
//  Created by @islamien  on 25/6/25.
//

import Foundation

final class CrystalAndDragonsViewModel {
    private let view: CrystalAndDragonsView
    private var world: WorldModel
    private var player: PlayerModel
    private var running = true
    private var stepCount = 0
    
    init(view: CrystalAndDragonsView) {
        self.world = WorldFactory.createWorld(width: 5, height: 5)
        self.player = PlayerModel(position: PositionModel(x: 0, y: 0))
        self.view = view
    }
    
    func startGame() {
        view.showText(with: "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:")
        guard let line = view.readCommand(),
              let count = Int(line), count >= 5
        else {
            view.showText(with: "–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∏–∂–µ 5 –∫–æ–º–Ω–∞—Ç!")
            return
        }
        
        let root = Int(Double(count).squareRoot())
        var width = count, height = 1
        
        for w in (1...root).reversed() {
            if count % w == 0 {
                width = count / w
                height = w
                break
            }
        }
        
        world = WorldFactory.createWorld(width: width, height: height)
        player = PlayerModel(position: PositionModel(x: 0, y: 0))
        stepCount = count * 2
        
        view.showText(with: "–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å, \n–ö—Ä–∏—Å—Ç–∞–ª–ª—ã –∏ –¥—Ä–∞–∫–æ–Ω—ã! (menu ‚Äì —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥) \n–õ–∏–º–∏—Ç —à–∞–≥–æ–≤: \(stepCount)")
        view.showText(with: "–õ–∞–±–∏—Ä–∏–Ω—Ç \(width) x \(height) –∏–∑ \(count) –∫–æ–º–Ω–∞—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
        view.showText(with: "–ù–∞–∂–º–∏ –Ω–∞: \nn - –°–µ–≤–µ—Ä \ns - –Æ–≥ \nw - –ó–∞–ø–∞–¥ \ne - –í–æ—Å—Ç–æ–∫")
        gameCycle()
    }
    
    private func gameCycle() {
        while running {
            guard let command = view.readCommand() else {
                continue
            }
            
            view.showText(with: commands(with: command))
        }
    }
    
    private func commands(with command: String) -> String {
        let parts = command.lowercased().split(separator: " ")
        
        guard let commands = parts.first else {
            return ""
        }
        
        switch commands {
        case "n":
            return step(with: .n)
        case "s":
            return step(with: .s)
        case "e":
            return step(with: .e)
        case "w":
            return step(with: .w)
        case "see":
            return see()
        case "bag":
            return inventory()
        case "get":
            return getItem(with: String(parts.dropFirst().joined(separator: " ")))
        case "drop":
            return dropItem(with: String(parts.dropFirst().joined(separator: " ")))
        case "open":
            return openChest()
        case "menu":
            return "–í—Å–µ –∫–æ–º–∞–Ω–¥—ã: \nüéÆn/s/e/w \nüëÄsee \nü™ìget [item] \nüëùbag \nüõëstop"
        case "stop":
            running = false
            return  "‚ùå–í—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∏–≥—Ä—É, –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!‚ùå"
        case "step":
            return "–¢–µ–∫—â–∏–π –ª–∏–º–∏—Ç —à–∞–≥–æ–≤: \(stepCount)"
        default:
            return "–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç üòû"
        }
    }
    
    private func items(with position: PositionModel) -> [ItemModel] {
        return world.itemsMap[position] ?? []
    }
    
    private func step(with route: Route) -> String {
        stepCount -= 1
        
        if stepCount <= 0 {
            running = false
            return "–õ–∏–º–∏—Ç —à–∞–≥–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω, –≤—ã —É–º–µ—Ä–ª–∏.üíÄ"
        }
        
        guard let room = world.rooms[player.position],
              room.doors.contains(route)
        else {
            return "‚ùå–¢—É—Ç —Å—Ç–µ–Ω—ã, –∏–¥—Ç–∏ –Ω–µ–ª—å–∑—è.‚ùå"
        }
        
        let delta =
        switch route {
        case .n:
            (0, 1)
        case .s:
            (0,-1)
        case .e:
            (1, 0)
        case .w:
            (-1, 0)
        }
        
        player.position = PositionModel(
            x: player.position.x + delta.0,
            y: player.position.y + delta.1
        )
        
        return see()
    }
    
    private func see() -> String {
        guard let room = world.rooms[player.position] else {
            return ""
        }
        
        let items = items(with: player.position)
        
        let doors = room.doors.map {
            $0.rawValue.uppercased()
        }
        
        return "You are in the room [\(room.position.x), \(room.position.y)]. There are \(doors.count) doors: \(doors.joined(separator: ", ")). Items in the room: \(items.isEmpty ? "–ù–µ—Ç—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤" : items.map(\.rawValue).joined(separator: ", ") + ".")"
    }
    
    private func inventory() -> String {
        player.inventory.isEmpty ? "–£ —Ç–µ–±—è –ø—É—Å—Ç–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å. üòï" : "–£ –≤–∞—Å –µ—Å—Ç—å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ: \(player.inventory.map(\.rawValue).joined(separator: ", "))."
    }
    
    private func getItem(with name: String) -> String {
        let position = player.position
        
        guard var items = world.itemsMap[position],
              let item = ItemModel(rawValue: name),
              let index = items.firstIndex(of: item) else {
            return "–¢—É—Ç –Ω–µ—Ç \(name). ü§∑üèª‚Äç‚ôÇÔ∏è"
        }
        
        if item == .chest {
            return "–¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø–æ–¥–Ω—è—Ç—å —Å—É–Ω–¥—É–∫. üòÖ"
        }
        
        items.remove(at: index)
        world.itemsMap[position] = items
        player.inventory.append(item)
        
        return "–í—ã –ø–æ–¥–Ω—è–ª–∏ \(name). üòè"
    }
    
    private func dropItem(with name: String) -> String {
        guard let item = ItemModel(rawValue: name),
              let index = player.inventory.firstIndex(of: item) else {
            return "–£ –≤–∞—Å –Ω–µ—Ç \(name)."
        }
        
        player.inventory.remove(at: index)
        world.itemsMap[player.position, default: []].append(item)
        
        return "–í—ã –±—Ä–æ—Å–∏–ª–∏ \(name)."
    }
    
    private func openChest() -> String {
        let itemsHere = items(with: player.position)
        
        guard itemsHere.contains(.chest) else {
            return "–¢—É—Ç –Ω–µ—Ç —Å—É–Ω–¥—É–∫–∞."
        }
        
        guard let keyIndex = player.inventory.firstIndex(of: .key) else {
            return "–ù—É–∂–µ–Ω –∫–ª—é—á üîë."
        }
        
        world.itemsMap[player.position] = itemsHere.filter {
            $0 != .chest
        }
        
        player.inventory.remove(at: keyIndex)
        running = false
        
        return "–°—É–Ω–¥—É–∫ –æ—Ç–∫—Ä—ã—Ç, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–≤—è—â–µ–Ω–Ω—ã–π –ì—Ä–∞–∞–ª—åü•á \n–í—ã –ø–æ–±–µ–¥–∏–ª–∏!"
    }
}
